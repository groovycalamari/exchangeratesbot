/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Copyright 2020 Sergio del Amo.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    // https://plugins.gradle.org/plugin/org.kordamp.gradle.java-project
    id 'org.kordamp.gradle.java-project' version '0.32.0'
}

ext {
    githubSlug = 'exchangeratesbot'
    githubOrg = 'groovycalamari'
}

config {
    release = (rootProject.findProperty('release') ?: false) as boolean

    info {
        name        = 'Exchange Rates Bot'
        vendor      = 'Groovy Calamari'
        description = 'Bot to obtain foreign exchange rates published by the European Central Bank.'
        inceptionYear = '2020'

        links {
            website      = "https://github.com/${githubOrg}/${githubSlug}"
            issueTracker = "https://github.com/${githubOrg}/${githubSlug}/issues"
            scm          = "https://github.com/${githubOrg}/${githubSlug}.git"
        }

        people {
            person {
                id    = 'sdelamo'
                name  = 'Sergio del Amo'
                roles = ['developer']
            }
        }
        ciManagement {
            system = "AWS Code Build"
            url = "https://eu-west-1.console.aws.amazon.com/codesuite/codebuild/projects/exchangeratesbot/history?region=eu-west-1"
        }
    }

    licensing {
        licenses {
            license {
                id = 'Apache-2.0'
            }
        }
    }
}
allprojects {
    apply plugin: 'idea'
    apply plugin: 'groovy'
    repositories {
        mavenCentral()
        maven { url "https://jcenter.bintray.com" }
        maven { url = 'https://dl.bintray.com/groovycalamari/maven'}
        maven { url "https://oss.jfrog.org/oss-snapshot-local" }
    }
}
subprojects { subproject ->

    dependencies {
        annotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
        annotationProcessor "io.micronaut:micronaut-inject-java"
        annotationProcessor "io.micronaut:micronaut-validation"
        implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
        implementation "io.micronaut:micronaut-inject"
        implementation "io.micronaut:micronaut-runtime"
        implementation "io.micronaut:micronaut-validation"

        testAnnotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
        testAnnotationProcessor "io.micronaut:micronaut-inject-java"
        testImplementation platform("io.micronaut:micronaut-bom:$micronautVersion")
        testImplementation("org.spockframework:spock-core") {
            exclude module: 'groovy-all'
        }
        testImplementation "io.micronaut:micronaut-function-client"
        testImplementation "io.micronaut:micronaut-inject-java"
        testRuntimeOnly "io.micronaut:micronaut-http-server-netty"
        testRuntimeOnly "io.micronaut:micronaut-function-web"
    }

    if (subproject.name.startsWith('runtimelambda')) {
        dependencies {
            runtimeOnly "com.amazonaws:aws-lambda-java-log4j2:1.0.0"
            runtimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:2.9.1"

//            implementation "io.micronaut:micronaut-function-aws"
//            implementation "com.amazonaws:aws-lambda-java-events:$lambdaEventsVersion"
        }
        tasks.register('addBuildIdToAbout') { task ->
            task.extensions.add('about', '/src/main/resources/about.md')
            task.onlyIf {
                System.getenv('CODEBUILD_BUILD_ID') != null && new File("${project.projectDir.path}${about}").exists()
            }
            task.doLast {
                new File("${project.projectDir.path}${about}") << "\n\nbuild: ${System.getenv('CODEBUILD_BUILD_ID')}".toString()
                println new File("${project.projectDir.path}${about}").text
            }
        }
    }

    compileGroovy {
        sourceCompatibility = project.sourceCompatibility
        targetCompatibility = project.targetCompatibility
    }
}