import groovycalamari.exchangeratesbot.build.ChatBotsRuntime

plugins {
    id "com.github.johnrengelman.shadow" version "5.2.0"
    id "jp.classmethod.aws.lambda" version "0.39"
    id "net.ltgt.apt-eclipse" version "0.21"
    id "application"
    id "groovy"
}

version "0.1"
group "groovycalamari"


ext {
    micronautChatsVersion = '0.31'
    dynamoDbVersion = '2.10.73'
    lambdaEventsVersion = '2.2.7'
    xrayRecorderSdkApacheHttpVersion = '2.4.0'
    exchangeRatesApiVersion = '0.5'
}

repositories {
    jcenter()
}

repositories {
    mavenCentral()
    maven { url "https://jcenter.bintray.com" }
    maven { url = 'https://dl.bintray.com/groovycalamari/maven'}
    maven { url "https://oss.jfrog.org/oss-snapshot-local" }
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly 
}

dependencies {
    annotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"
    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    implementation "io.micronaut:micronaut-inject"
    implementation "io.micronaut:micronaut-validation"
    implementation "io.micronaut:micronaut-runtime"
    implementation "io.micronaut:micronaut-http-client"
    compileOnly "groovycalamari:googlechatcore:$micronautChatsVersion"
    compileOnly "groovycalamari:telegramdispatcher:$micronautChatsVersion"
    compileOnly "software.amazon.awssdk:dynamodb:$dynamoDbVersion"
    if (project.ext.has("chatbots.env")) {
        ChatBotsRuntime chatBotsRuntime = ChatBotsRuntime.TELEGRAM_LAMBDA
        if (project.ext.get("chatbots.env") == 'googlechathttpfunction') {
            chatBotsRuntime = ChatBotsRuntime.GOOGLECHAT_GCP_HTTP_FUNCTION
        } else if(project.ext.get("chatbots.env") == 'googlechat') {
            chatBotsRuntime = ChatBotsRuntime.GOOGLECHAT_LAMBDA
        } else if(project.ext.get("chatbots.env") == 'telegram') {
            chatBotsRuntime = ChatBotsRuntime.TELEGRAM_LAMBDA
        }
        boolean lambdaEnvironment = chatBotsRuntime == ChatBotsRuntime.TELEGRAM_LAMBDA ||
                chatBotsRuntime == ChatBotsRuntime.GOOGLECHAT_LAMBDA
        if (lambdaEnvironment) {
            implementation "io.micronaut:micronaut-function-aws"
            implementation "com.amazonaws:aws-lambda-java-events:$lambdaEventsVersion"
            implementation "software.amazon.awssdk:dynamodb:$dynamoDbVersion"
            implementation "com.amazonaws:aws-xray-recorder-sdk-apache-http:$xrayRecorderSdkApacheHttpVersion"
        }
        switch (chatBotsRuntime) {
            case ChatBotsRuntime.TELEGRAM_LAMBDA:
                logger.quiet("telegram lambda runtime")
                runtimeOnly "groovycalamari:telegramlambda:$micronautChatsVersion"
                break
            case ChatBotsRuntime.GOOGLECHAT_GCP_HTTP_FUNCTION:
                logger.quiet("micronaut-gcp-function-http runtime")
                runtimeOnly "groovycalamari:googlechathttpserver:$micronautChatsVersion"
                implementation("io.micronaut.gcp:micronaut-gcp-function-http:1.2.0.BUILD-SNAPSHOT")
                break
            case ChatBotsRuntime.GOOGLECHAT_LAMBDA:
                logger.quiet("google chat lambda runtime")
                runtimeOnly "groovycalamari:googlechatlambda:$micronautChatsVersion"
                break
        }
    }
    implementation "groovycalamari:exchangeratesapi:$exchangeRatesApiVersion"
    runtimeOnly "com.amazonaws:aws-lambda-java-log4j2:1.0.0"
    runtimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:2.9.1"

    testImplementation "groovycalamari:telegramlambda:$micronautChatsVersion"
    testImplementation "software.amazon.awssdk:dynamodb:$dynamoDbVersion"

    testAnnotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testImplementation platform("io.micronaut:micronaut-bom:$micronautVersion")

    testImplementation("org.spockframework:spock-core") {
        exclude module: 'groovy-all'
    }
    testImplementation "io.micronaut:micronaut-function-client"
    testImplementation "io.micronaut:micronaut-inject-java"
    testRuntimeOnly "io.micronaut:micronaut-http-server-netty"
    testRuntimeOnly "io.micronaut:micronaut-function-web"
}

test.classpath += configurations.developmentOnly
shadowJar {
    transform(com.github.jengelman.gradle.plugins.shadow.transformers.Log4j2PluginsCacheFileTransformer)
}

tasks.withType(JavaCompile){
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}

shadowJar {
    mergeServiceFiles()
}

tasks.withType(JavaExec) {
    classpath += configurations.developmentOnly
    jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
}
mainClassName = "io.micronaut.function.executor.FunctionApplication"
applicationDefaultJvmArgs = [""]

shadowJar {
    archiveBaseName =  "${rootProject.name}${project.ext.has("chatbots.env") ? project.ext.get("chatbots.env") : ""}"
}
jar {
    archiveBaseName = "${rootProject.name}${project.ext.has("chatbots.env") ? project.ext.get("chatbots.env") : ""}"
    manifest {
        attributes 'Main-Class': mainClassName
    }
}

