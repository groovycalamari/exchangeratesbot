plugins {
    id "com.github.johnrengelman.shadow" version "5.2.0"
    id "jp.classmethod.aws.lambda" version "0.39"
    id "net.ltgt.apt-eclipse" version "0.21"
    id "application"
    id "groovy"
}

version "0.1"
group "groovycalamari"

repositories {
    mavenCentral()
    maven { url "https://jcenter.bintray.com" }
    maven { url = 'https://dl.bintray.com/groovycalamari/maven'}

}

configurations {
    // for dependencies that are needed for development only
    developmentOnly 
}

dependencies {
    annotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"
    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    implementation "io.micronaut:micronaut-inject"
    implementation "io.micronaut:micronaut-validation"
    implementation "io.micronaut:micronaut-runtime"
    implementation "io.micronaut:micronaut-function-aws"
    implementation 'com.github.spotbugs:spotbugs-annotations:3.1.12'

    implementation "com.amazonaws:aws-lambda-java-events:2.2.7"

    implementation 'com.amazonaws:aws-xray-recorder-sdk-apache-http:2.4.0'

    implementation 'groovycalamari:telegramlambda:0.8'
    implementation 'groovycalamari:exchangeratesapi:0.4'

    runtimeOnly "com.amazonaws:aws-lambda-java-log4j2:1.0.0"
    runtimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:2.9.1"

    testAnnotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testImplementation platform("io.micronaut:micronaut-bom:$micronautVersion")

    testImplementation("org.spockframework:spock-core") {
        exclude module: 'groovy-all'
    }
    testImplementation "io.micronaut:micronaut-function-client"
    testImplementation "io.micronaut:micronaut-inject-java"
    testRuntimeOnly "io.micronaut:micronaut-http-server-netty"
    testRuntimeOnly "io.micronaut:micronaut-function-web"
}

test.classpath += configurations.developmentOnly
shadowJar {
    transform(com.github.jengelman.gradle.plugins.shadow.transformers.Log4j2PluginsCacheFileTransformer)
}

tasks.withType(JavaCompile){
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}

shadowJar {
    mergeServiceFiles()
}

tasks.withType(JavaExec) {
    classpath += configurations.developmentOnly
    jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
}
mainClassName = "io.micronaut.function.executor.FunctionApplication"
applicationDefaultJvmArgs = [""]

jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
}