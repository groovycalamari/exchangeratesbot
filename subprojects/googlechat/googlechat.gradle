/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Copyright 2020 Sergio del Amo.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    id "com.github.johnrengelman.shadow" version "5.2.0"
    id "jp.classmethod.aws.lambda" version "0.39"
    id "net.ltgt.apt-eclipse" version "0.21"
    id "application"
    id "groovy"
}

version "0.1"
group "groovycalamari"

config {
    docs {
        groovydoc  { enabled = false }
        javadoc { enabled = false }
    }
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

dependencies {
    annotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"
    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    implementation "io.micronaut:micronaut-inject"
    implementation "io.micronaut:micronaut-validation"
    implementation "io.micronaut:micronaut-runtime"

    implementation "io.micronaut:micronaut-function-aws"
    implementation "com.amazonaws:aws-lambda-java-events:$lambdaEventsVersion"

    implementation "software.amazon.awssdk:dynamodb:$dynamoDbVersion"
    implementation project(":exchangeratesbot")

    runtimeOnly "groovycalamari:googlechatlambda:$micronautChatsVersion"

    runtimeOnly "com.amazonaws:aws-lambda-java-log4j2:1.0.0"
    runtimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:2.9.1"

    testImplementation "groovycalamari:telegramlambda:$micronautChatsVersion"
    testImplementation "software.amazon.awssdk:dynamodb:$dynamoDbVersion"

    testAnnotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testImplementation platform("io.micronaut:micronaut-bom:$micronautVersion")

    testImplementation("org.spockframework:spock-core") {
        exclude module: 'groovy-all'
    }
    testImplementation "io.micronaut:micronaut-function-client"
    testImplementation "io.micronaut:micronaut-inject-java"
    testRuntimeOnly "io.micronaut:micronaut-http-server-netty"
    testRuntimeOnly "io.micronaut:micronaut-function-web"
}

compileGroovy {
    sourceCompatibility = project.sourceCompatibility
    targetCompatibility = project.targetCompatibility
}

test.classpath += configurations.developmentOnly
shadowJar {
    transform(com.github.jengelman.gradle.plugins.shadow.transformers.Log4j2PluginsCacheFileTransformer)
}

tasks.withType(JavaCompile){
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}

shadowJar {
    mergeServiceFiles()
}

tasks.withType(JavaExec) {
    classpath += configurations.developmentOnly
    jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
}
mainClassName = "io.micronaut.function.executor.FunctionApplication"
applicationDefaultJvmArgs = [""]

jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
}


task addBuildIdToAbout {
    ext {
        about = '/src/main/resources/about.md"'
    }
    onlyIf {
        System.getenv('CODEBUILD_BUILD_ID') != null && new File("${project.projectDir.path}${about}").exists()
    }
    doLast {
        new File("${project.projectDir.path}${about}") << "\n\nbuild: ${System.getenv('CODEBUILD_BUILD_ID')}".toString()
        println new File("${project.projectDir.path}${about}").text
    }
}